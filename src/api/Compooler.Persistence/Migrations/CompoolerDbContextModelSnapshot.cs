// <auto-generated />
using System;
using Compooler.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Compooler.Persistence.Migrations
{
    [DbContext(typeof(CompoolerDbContext))]
    partial class CompoolerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Compooler.Domain.Entities.RideEntity.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPassengers")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("TimeOfDeparture")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("Compooler.Domain.Entities.RideEntity.RidePassenger", b =>
                {
                    b.Property<int>("RideId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("RideId", "UserId");

                    b.ToTable("RidePassengers");
                });

            modelBuilder.Entity("Compooler.Domain.Entities.UserEntity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Compooler.Domain.Entities.RideEntity.Ride", b =>
                {
                    b.OwnsOne("Compooler.Domain.Entities.RideEntity.Route", "Route", b1 =>
                        {
                            b1.Property<int>("RideId")
                                .HasColumnType("integer");

                            b1.HasKey("RideId");

                            b1.ToTable("Routes", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RideId");

                            b1.OwnsOne("Compooler.Domain.Entities.RideEntity.GeographicCoordinates", "Finish", b2 =>
                                {
                                    b2.Property<int>("RouteRideId")
                                        .HasColumnType("integer");

                                    b2.Property<Point>("Point")
                                        .IsRequired()
                                        .HasColumnType("geography (point)");

                                    b2.HasKey("RouteRideId");

                                    b2.ToTable("Routes");

                                    b2.WithOwner()
                                        .HasForeignKey("RouteRideId");
                                });

                            b1.OwnsOne("Compooler.Domain.Entities.RideEntity.GeographicCoordinates", "Start", b2 =>
                                {
                                    b2.Property<int>("RouteRideId")
                                        .HasColumnType("integer");

                                    b2.Property<Point>("Point")
                                        .IsRequired()
                                        .HasColumnType("geography (point)");

                                    b2.HasKey("RouteRideId");

                                    b2.ToTable("Routes");

                                    b2.WithOwner()
                                        .HasForeignKey("RouteRideId");
                                });

                            b1.Navigation("Finish")
                                .IsRequired();

                            b1.Navigation("Start")
                                .IsRequired();
                        });

                    b.Navigation("Route")
                        .IsRequired();
                });

            modelBuilder.Entity("Compooler.Domain.Entities.RideEntity.RidePassenger", b =>
                {
                    b.HasOne("Compooler.Domain.Entities.RideEntity.Ride", null)
                        .WithMany("Passengers")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Compooler.Domain.Entities.RideEntity.Ride", b =>
                {
                    b.Navigation("Passengers");
                });
#pragma warning restore 612, 618
        }
    }
}
