schema {
  query: Query
  mutation: Mutation
}

interface Error {
  code: String!
  message: String!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type CommuteGroup implements Node {
  id: ID!
  maxPassengers: Int!
  route: Route!
  passengers: [CommuteGroupPassenger!]!
  driver: User!
}

type CommuteGroupPassenger {
  joinedAt: DateTime!
  user: User!
}

"A connection to a list of items."
type CommuteGroupsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CommuteGroupsEdge!]
  "A flattened list of the nodes."
  nodes: [CommuteGroup!]
}

"An edge in a connection."
type CommuteGroupsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CommuteGroup!
}

type CreateCommuteGroupPayload {
  commuteGroup: CommuteGroup
  errors: [CreateCommuteGroupError!]
}

type CreateUserPayload {
  user: User
}

type GeographicCoordinates {
  latitude: Float!
  longitude: Float!
}

type InvalidLatitudeError implements Error {
  code: String!
  message: String!
}

type InvalidLongitudeError implements Error {
  code: String!
  message: String!
}

type Mutation {
  createCommuteGroup(input: CreateCommuteGroupInput): CreateCommuteGroupPayload!
  createUser(input: CreateUserInput): CreateUserPayload!
  removeUser(input: RemoveUserInput): RemoveUserPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  commuteGroups("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): CommuteGroupsConnection
  users("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String): UsersConnection
}

type RemoveUserPayload {
  user: User
  errors: [RemoveUserError!]
}

type Route {
  start: GeographicCoordinates!
  finish: GeographicCoordinates!
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  commuteGroups: [CommuteGroup!]!
}

type UserNotFoundError implements Error {
  id: ID!
  code: String!
  message: String!
}

"A connection to a list of items."
type UsersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UsersEdge!]
  "A flattened list of the nodes."
  nodes: [User!]
}

"An edge in a connection."
type UsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User!
}

union CreateCommuteGroupError = InvalidLatitudeError | InvalidLongitudeError | UserNotFoundError

union RemoveUserError = UserNotFoundError

input CreateCommuteGroupInput {
  driverId: ID!
  maxPassengers: Int!
  startLatitude: Float!
  startLongitude: Float!
  finishLatitude: Float!
  finishLongitude: Float!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
}

input RemoveUserInput {
  id: ID!
}

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")